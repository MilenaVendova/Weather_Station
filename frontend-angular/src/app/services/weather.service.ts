// üîß –¢–æ–≤–∞ –µ —Å–µ—Ä–≤–∏—Å—ä—Ç - –∫–∞—Ç–æ –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ–π—Ç–æ –Ω–æ—Å–∏ –¥–∞–Ω–Ω–∏ –∑–∞ –≤—Ä–µ–º–µ—Ç–æ
import { Injectable } from '@angular/core'; // üíâ –í–∑–∏–º–∞–º–µ "–∏–Ω–∂–µ–∫—Ü–∏—è—Ç–∞" - —Å–ø–µ—Ü–∏–∞–ª–Ω–∞ Angular –º–∞–≥–∏—è
import { HttpClient, HttpParams } from '@angular/common/http'; // üìû –í–∑–∏–º–∞–º–µ "—Ç–µ–ª–µ—Ñ–æ–Ω–∞" –∑–∞ –≥–æ–≤–æ—Ä–µ–Ω–µ —Å—ä—Å —Å—ä—Ä–≤—ä—Ä–∞
import { Observable, catchError, of, map, switchMap } from 'rxjs'; // üé≠ –í–∑–∏–º–∞–º–µ —Å–ø–µ—Ü–∏–∞–ª–Ω–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –∑–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
import {
  WeatherInfo,
  OpenMeteoWeatherResponse,
  OpenMeteoGeocodingResponse,
  OpenMeteoGeocodingResult,
  WMO_WEATHER_CODES
} from '../models/weather.model'; // üìã –í–∑–∏–º–∞–º–µ –Ω–∞—à–∏—Ç–µ "—Ñ–æ—Ä–º–∏—á–∫–∏" –∑–∞ –≤—Ä–µ–º–µ—Ç–æ
import { environment } from '../../environments/environment'; // üåç –í–∑–∏–º–∞–º–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏—Ç–µ

// üè∑Ô∏è –î–µ–∫–æ—Ä–∞—Ç–æ—Ä - –∫–∞–∑–≤–∞ –Ω–∞ Angular, —á–µ —Ç–æ–≤–∞ –µ —Å–µ—Ä–≤–∏—Å
@Injectable({ // –°–ª–∞–≥–∞–º–µ –µ—Ç–∏–∫–µ—Ç "–ê–∑ —Å—ä–º —Å–µ—Ä–≤–∏—Å!"
  providedIn: 'root' // üå≥ –ö–∞–∑–≤–∞–º–µ: "–¢–æ–∑–∏ —Å–µ—Ä–≤–∏—Å –µ –¥–æ—Å—Ç—ä–ø–µ–Ω –Ω–∞–≤—Å—è–∫—ä–¥–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ"
}) // –ö—Ä–∞–π –Ω–∞ –µ—Ç–∏–∫–µ—Ç–∞

// üå¶Ô∏è –ö–ª–∞—Å—ä—Ç WeatherService - –Ω–∞—à–∏—è—Ç –ø–æ–º–æ—â–Ω–∏–∫ –∑–∞ –≤—Ä–µ–º–µ—Ç–æ
export class WeatherService { // –ó–∞–ø–æ—á–≤–∞–º–µ –¥–∞ –ø—Ä–∞–≤–∏–º –ø–æ–º–æ—â–Ω–∏–∫–∞

  // üó∫Ô∏è –†–µ—á–Ω–∏–∫ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∑–∞ —Ä–∞–∑–ª–∏—á–Ω–∏—Ç–µ "–¥—ä—Ä–∂–∞–≤–∏" (–∑–∞ —Å—ä–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç —Å —Ç–µ–∫—É—â–∏—è UI)
  private readonly cityCoordinates: { [key: string]: { lat: number, lon: number, name: string } } = {
    'bulgaria': { lat: 42.6977, lon: 23.3219, name: 'Sofia, Bulgaria' },      // üáßüá¨ –°–æ—Ñ–∏—è, –ë—ä–ª–≥–∞—Ä–∏—è
    'uk': { lat: 51.5074, lon: -0.1278, name: 'London, United Kingdom' },     // üá¨üáß –õ–æ–Ω–¥–æ–Ω, –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è
    
  };

  // üî® –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä - —Å–ø–µ—Ü–∏–∞–ª–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—è—Ç–æ —Å–µ –∏–∑–ø—ä–ª–Ω—è–≤–∞ –ø—Ä–∏ —Å—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ —Å–µ—Ä–≤–∏—Å–∞
  constructor(private http: HttpClient) { } // –ü–æ–ª—É—á–∞–≤–∞–º–µ HttpClient –∫–∞—Ç–æ –ø–æ–¥–∞—Ä—ä–∫ –æ—Ç Angular

  /**
   * üåç –í–∑–∏–º–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –≤—Ä–µ–º–µ—Ç–æ –∑–∞ –¥–∞–¥–µ–Ω–∞ –¥—ä—Ä–∂–∞–≤–∞ –æ—Ç Open-Meteo API
   * @param country - –∫–æ–¥—ä—Ç –Ω–∞ –¥—ä—Ä–∂–∞–≤–∞—Ç–∞ (–Ω–∞–ø—Ä. 'bulgaria', 'uk')
   * @returns Observable —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è—Ç–∞ –∑–∞ –≤—Ä–µ–º–µ—Ç–æ (–∫–∞—Ç–æ –æ–±–µ—â–∞–Ω–∏–µ –∑–∞ –¥–∞–Ω–Ω–∏)
   */
  getWeather(country: string): Observable<WeatherInfo | null> { // –§—É–Ω–∫—Ü–∏—è, –∫–æ—è—Ç–æ –≤–∑–∏–º–∞ –≤—Ä–µ–º–µ—Ç–æ
    // üó∫Ô∏è –ù–∞–º–∏—Ä–∞–º–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏—Ç–µ –∑–∞ —Ç–∞–∑–∏ –¥—ä—Ä–∂–∞–≤–∞
    const cityData = this.cityCoordinates[country.toLowerCase()];

    if (!cityData) { // ‚ùì –ê–∫–æ –Ω—è–º–∞ —Ç–∞–∫–∞–≤–∞ –¥—ä—Ä–∂–∞–≤–∞ –≤ –Ω–∞—à–∏—è —Ä–µ—á–Ω–∏–∫...
      console.error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞ –¥—ä—Ä–∂–∞–≤–∞: ${country}`); // üì¢ –í–∏–∫–∞–º–µ –≤ –∫–æ–Ω–∑–æ–ª–∞—Ç–∞
      return of(null); // –í—Ä—ä—â–∞–º–µ –ø—Ä–∞–∑–Ω–∏ —Ä—ä—Ü–µ
    }

    // üì§ –ü—Ä–∞–≤–∏–º –∑–∞—è–≤–∫–∞ –∫—ä–º Open-Meteo API —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏—Ç–µ
    return this.getWeatherByCoordinates(cityData.lat, cityData.lon, cityData.name);
  } // –ö—Ä–∞–π –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è—Ç–∞ getWeather

  /**
   * üåç –í–∑–∏–º–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –≤—Ä–µ–º–µ—Ç–æ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –æ—Ç Open-Meteo API
   * @param latitude - –≥–µ–æ–≥—Ä–∞—Ñ—Å–∫–∞ —à–∏—Ä–∏–Ω–∞
   * @param longitude - –≥–µ–æ–≥—Ä–∞—Ñ—Å–∫–∞ –¥—ä–ª–∂–∏–Ω–∞
   * @param locationName - –∏–º–µ –Ω–∞ –ª–æ–∫–∞—Ü–∏—è—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª–Ω–æ)
   * @returns Observable —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è—Ç–∞ –∑–∞ –≤—Ä–µ–º–µ—Ç–æ
   */
  getWeatherByCoordinates(latitude: number, longitude: number, locationName?: string): Observable<WeatherInfo | null> {
    // üìã –ü–æ–¥–≥–æ—Ç–≤—è–º–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏—Ç–µ –∑–∞ API –∑–∞—è–≤–∫–∞—Ç–∞
    const params = new HttpParams()
      .set('latitude', latitude.toString()) // üåç –ì–µ–æ–≥—Ä–∞—Ñ—Å–∫–∞ —à–∏—Ä–∏–Ω–∞
      .set('longitude', longitude.toString()) // üåç –ì–µ–æ–≥—Ä–∞—Ñ—Å–∫–∞ –¥—ä–ª–∂–∏–Ω–∞
      .set('current', 'temperature_2m,relative_humidity_2m,apparent_temperature,is_day,precipitation,weather_code,cloud_cover,wind_speed_10m,wind_direction_10m,wind_gusts_10m') // üå§Ô∏è –¢–µ–∫—É—â–∏ –¥–∞–Ω–Ω–∏
      .set('hourly', 'temperature_2m,weather_code,wind_speed_10m') // ‚è∞ –ß–∞—Å–æ–≤–∏ –¥–∞–Ω–Ω–∏ –∑–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
      .set('daily', 'weather_code,temperature_2m_max,temperature_2m_min') // üìÖ –î–Ω–µ–≤–Ω–∏ –¥–∞–Ω–Ω–∏
      .set('temperature_unit', environment.openMeteo.temperatureUnit) // üå°Ô∏è –ï–¥–∏–Ω–∏—Ü–∞ –∑–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
      .set('wind_speed_unit', environment.openMeteo.windSpeedUnit) // üí® –ï–¥–∏–Ω–∏—Ü–∞ –∑–∞ –≤—è—Ç—ä—Ä
      .set('precipitation_unit', environment.openMeteo.precipitationUnit) // üåßÔ∏è –ï–¥–∏–Ω–∏—Ü–∞ –∑–∞ –≤–∞–ª–µ–∂–∏
      .set('timeformat', environment.openMeteo.timeformat) // üïê –§–æ—Ä–º–∞—Ç –Ω–∞ –≤—Ä–µ–º–µ—Ç–æ
      .set('timezone', environment.openMeteo.timezone) // üåç –ß–∞—Å–æ–≤–∞ –∑–æ–Ω–∞
      .set('forecast_days', environment.openMeteo.forecastDays.toString()); // üìÖ –î–Ω–∏ –∑–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞

    // üåê URL –∑–∞ Open-Meteo Weather API
    const apiUrl = environment.openMeteo.weatherApiUrl;

    // üì§ –ü—Ä–∞–≤–∏–º –∑–∞—è–≤–∫–∞ –∫—ä–º Open-Meteo API
    return this.http.get<OpenMeteoWeatherResponse>(apiUrl, { params }) // –ó–≤—ä–Ω–∏–º –Ω–∞ Open-Meteo
      .pipe( // üö∞ –ò–∑–ø–æ–ª–∑–≤–∞–º–µ "—Ç—Ä—ä–±–∞" –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –æ—Ç–≥–æ–≤–æ—Ä–∞
        map(response => this.transformOpenMeteoToWeatherInfo(response, locationName)), // üîÑ –ü—Ä–µ–≤—Ä—ä—â–∞–º–µ –æ—Ç–≥–æ–≤–æ—Ä–∞ –≤ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç
        catchError(error => { // ü™§ –ê–∫–æ —Ö–≤–∞–Ω–µ–º –≥—Ä–µ—à–∫–∞...
          console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏—Ç–µ –∑–∞ –≤—Ä–µ–º–µ—Ç–æ –æ—Ç Open-Meteo:', error); // üì¢ –í–∏–∫–∞–º–µ –≤ –∫–æ–Ω–∑–æ–ª–∞—Ç–∞

          // üîç –ü–æ–∫–∞–∑–≤–∞–º–µ –ø–æ-–ø–æ–¥—Ä–æ–±–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –≥—Ä–µ—à–∫–∞—Ç–∞
          if (error.status === 400) {
            console.error('‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏! –ü—Ä–æ–≤–µ—Ä–µ—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏—Ç–µ.');
          } else if (error.status === 404) {
            console.error('‚ùå –õ–æ–∫–∞—Ü–∏—è—Ç–∞ –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä–µ—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏—Ç–µ.');
          } else if (error.status >= 500) {
            console.error('‚ùå –ü—Ä–æ–±–ª–µ–º —Å—ä—Å —Å—ä—Ä–≤—ä—Ä–∞ –Ω–∞ Open-Meteo. –û–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ –ø–æ-–∫—ä—Å–Ω–æ.');
          }

          // ü§∑ –í—Ä—ä—â–∞–º–µ null –ø—Ä–∏ –≥—Ä–µ—à–∫–∞ (–ø—Ä–∞–∑–Ω–∏ —Ä—ä—Ü–µ)
          return of(null); // –ö–∞–∑–≤–∞–º–µ "—Å—ä–∂–∞–ª—è–≤–∞–º, –Ω—è–º–∞–º –¥–∞–Ω–Ω–∏"
        }) // –ö—Ä–∞–π –Ω–∞ —Ö–≤–∞—â–∞–Ω–µ—Ç–æ –Ω–∞ –≥—Ä–µ—à–∫–∏
      ); // –ö—Ä–∞–π –Ω–∞ —Ç—Ä—ä–±–∞—Ç–∞
  } // –ö—Ä–∞–π –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è—Ç–∞ getWeatherByCoordinates

  /**
   * üîÑ –ü—Ä–µ–≤—Ä—ä—â–∞ Open-Meteo –æ—Ç–≥–æ–≤–æ—Ä –≤ –Ω–∞—à WeatherInfo —Ñ–æ—Ä–º–∞—Ç
   * @param response - –æ—Ç–≥–æ–≤–æ—Ä—ä—Ç –æ—Ç Open-Meteo API
   * @param locationName - –∏–º–µ –Ω–∞ –ª–æ–∫–∞—Ü–∏—è—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª–Ω–æ)
   * @returns WeatherInfo –æ–±–µ–∫—Ç –≤ –Ω–∞—à–∏—è —Ñ–æ—Ä–º–∞—Ç
   */
  private transformOpenMeteoToWeatherInfo(response: OpenMeteoWeatherResponse, locationName?: string): WeatherInfo {
    // üå§Ô∏è –í–∑–∏–º–∞–º–µ —Ç–µ–∫—É—â–∏—Ç–µ –¥–∞–Ω–Ω–∏
    const current = response.current;
    if (!current) {
      throw new Error('–ù—è–º–∞ —Ç–µ–∫—É—â–∏ –¥–∞–Ω–Ω–∏ –≤ –æ—Ç–≥–æ–≤–æ—Ä–∞ –æ—Ç Open-Meteo');
    }

    // üå°Ô∏è –§–æ—Ä–º–∞—Ç–∏—Ä–∞–º–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞—Ç–∞
    const temperature = `${Math.round(current.temperature_2m)}¬∞`;

    // üí® –§–æ—Ä–º–∞—Ç–∏—Ä–∞–º–µ —Å–∫–æ—Ä–æ—Å—Ç—Ç–∞ –Ω–∞ –≤—è—Ç—ä—Ä–∞ (–≤–µ—á–µ –µ –≤ km/h –æ—Ç Open-Meteo)
    const windSpeed = `${Math.round(current.wind_speed_10m)} km/h`;

    // üíß –§–æ—Ä–º–∞—Ç–∏—Ä–∞–º–µ –≤–ª–∞–∂–Ω–æ—Å—Ç—Ç–∞
    const humidity = `${current.relative_humidity_2m}%`;

    // üìç –§–æ—Ä–º–∞—Ç–∏—Ä–∞–º–µ –ª–æ–∫–∞—Ü–∏—è—Ç–∞
    const location = locationName || `${response.latitude.toFixed(2)}¬∞, ${response.longitude.toFixed(2)}¬∞`;

    // üìù –ü—Ä–µ–≤—Ä—ä—â–∞–º–µ WMO –∫–æ–¥–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–µ
    const description = this.getWeatherDescription(current.weather_code);

    // üìä –°—ä–∑–¥–∞–≤–∞–º–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –æ—Ç —á–∞—Å–æ–≤–∏—Ç–µ –¥–∞–Ω–Ω–∏
    const forecast = this.createForecastFromHourlyData(response);

    return {
      location,
      temperature,
      description,
      windSpeed,
      humidity,
      forecast
    };
  }

  /**
   * üå¶Ô∏è –ü—Ä–µ–≤—Ä—ä—â–∞ WMO weather code –≤ —á–æ–≤–µ—à–∫–æ –æ–ø–∏—Å–∞–Ω–∏–µ
   * @param code - WMO weather code
   * @returns –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—Ä–µ–º–µ—Ç–æ
   */
  private getWeatherDescription(code: number): string {
    return WMO_WEATHER_CODES[code] || `Weather code ${code}`;
  }

  /**
   * üìä –°—ä–∑–¥–∞–≤–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –æ—Ç —á–∞—Å–æ–≤–∏—Ç–µ –¥–∞–Ω–Ω–∏ –Ω–∞ Open-Meteo
   * @param response - –æ—Ç–≥–æ–≤–æ—Ä—ä—Ç –æ—Ç Open-Meteo API
   * @returns –º–∞—Å–∏–≤ —Å –ø—Ä–æ–≥–Ω–æ–∑–Ω–∏ –µ–ª–µ–º–µ–Ω—Ç–∏
   */
  private createForecastFromHourlyData(response: OpenMeteoWeatherResponse) {
    const hourly = response.hourly;
    if (!hourly || !hourly.time || !hourly.temperature_2m) {
      // –ê–∫–æ –Ω—è–º–∞ —á–∞—Å–æ–≤–∏ –¥–∞–Ω–Ω–∏, —Å—ä–∑–¥–∞–≤–∞–º–µ –ø—Ä–∞–∑–Ω–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
      return [];
    }

    // üìÖ –í–∑–∏–º–∞–º–µ —Å–ª–µ–¥–≤–∞—â–∏—Ç–µ 8 —á–∞—Å–∞ (–Ω–∞ –≤—Å–µ–∫–∏ 3 —á–∞—Å–∞)
    const forecastItems = [];

    for (let i = 0; i < 8 && i < hourly.time.length; i += 1) {
      const timeIndex = i * 3; // –ù–∞ –≤—Å–µ–∫–∏ 3 —á–∞—Å–∞
      if (timeIndex < hourly.time.length) {
        const time = new Date(hourly.time[timeIndex]);
        const temp = hourly.temperature_2m[timeIndex];

        forecastItems.push({
          time: time.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', hour12: false }),
          temp: `${Math.round(temp)}¬∞`
        });
      }
    }

    return forecastItems;
  }

  /**
   * üîç –¢—ä—Ä—Å–∏ –≤—Ä–µ–º–µ—Ç–æ –ø–æ –∏–º–µ –Ω–∞ –≥—Ä–∞–¥ –∏–∑–ø–æ–ª–∑–≤–∞–π–∫–∏ Open-Meteo Geocoding API
   * @param cityName - –∏–º–µ—Ç–æ –Ω–∞ –≥—Ä–∞–¥–∞
   * @returns Observable —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è—Ç–∞ –∑–∞ –≤—Ä–µ–º–µ—Ç–æ
   */
  getWeatherByCity(cityName: string): Observable<WeatherInfo | null> {
    if (!cityName.trim()) {
      console.error('‚ùå –ü—Ä–∞–∑–Ω–æ –∏–º–µ –Ω–∞ –≥—Ä–∞–¥!');
      return of(null);
    }

    // üìã –ü–æ–¥–≥–æ—Ç–≤—è–º–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏—Ç–µ –∑–∞ Geocoding API –∑–∞—è–≤–∫–∞—Ç–∞
    const geocodingParams = new HttpParams()
      .set('name', cityName.trim()) // üèôÔ∏è –ò–º–µ—Ç–æ –Ω–∞ –≥—Ä–∞–¥–∞
      .set('count', '1') // üî¢ –ò—Å–∫–∞–º–µ —Å–∞–º–æ –ø—ä—Ä–≤–∏—è —Ä–µ–∑—É–ª—Ç–∞—Ç
      .set('language', 'en') // üó£Ô∏è –ï–∑–∏–∫ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ
      .set('format', 'json'); // üìÑ JSON —Ñ–æ—Ä–º–∞—Ç

    // üåê URL –∑–∞ Open-Meteo Geocoding API
    const geocodingUrl = environment.openMeteo.geocodingApiUrl;

    // üì§ –ü—ä—Ä–≤–æ —Ç—ä—Ä—Å–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏—Ç–µ –Ω–∞ –≥—Ä–∞–¥–∞
    return this.http.get<OpenMeteoGeocodingResponse>(geocodingUrl, { params: geocodingParams })
      .pipe(
        switchMap(geocodingResponse => {
          // üîç –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –∏–º–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏
          if (!geocodingResponse.results || geocodingResponse.results.length === 0) {
            console.error(`‚ùå –ì—Ä–∞–¥—ä—Ç "${cityName}" –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω!`);
            return of(null);
          }

          // üìç –í–∑–∏–º–∞–º–µ –ø—ä—Ä–≤–∏—è —Ä–µ–∑—É–ª—Ç–∞—Ç
          const location = geocodingResponse.results[0];
          const locationName = `${location.name}${location.country ? ', ' + location.country : ''}`;

          // üå¶Ô∏è –°–µ–≥–∞ —Ç—ä—Ä—Å–∏–º –≤—Ä–µ–º–µ—Ç–æ –∑–∞ —Ç–µ–∑–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
          return this.getWeatherByCoordinates(location.latitude, location.longitude, locationName);
        }),
        catchError(error => {
          console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Ç—ä—Ä—Å–µ–Ω–µ –Ω–∞ –≥—Ä–∞–¥:', error);

          // üîç –ü–æ–∫–∞–∑–≤–∞–º–µ –ø–æ-–ø–æ–¥—Ä–æ–±–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –≥—Ä–µ—à–∫–∞—Ç–∞
          if (error.status === 400) {
            console.error('‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω–æ –∏–º–µ –Ω–∞ –≥—Ä–∞–¥! –ü—Ä–æ–≤–µ—Ä–µ—Ç–µ –ø—Ä–∞–≤–æ–ø–∏—Å–∞.');
          } else if (error.status >= 500) {
            console.error('‚ùå –ü—Ä–æ–±–ª–µ–º —Å—ä—Å —Å—ä—Ä–≤—ä—Ä–∞ –Ω–∞ Open-Meteo Geocoding. –û–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ –ø–æ-–∫—ä—Å–Ω–æ.');
          }

          return of(null);
        })
      );
  }
}